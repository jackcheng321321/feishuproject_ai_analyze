"""Add missing ai_model fields

Revision ID: 5ede1e810562
Revises: 
Create Date: 2025-09-05 14:36:55.400301

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5ede1e810562'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """升级数据库结构"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_webhooks_active'), table_name='webhooks')
    op.drop_index(op.f('idx_webhooks_created_at'), table_name='webhooks')
    op.drop_index(op.f('idx_webhooks_webhook_id'), table_name='webhooks')
    op.drop_table('webhooks')
    op.drop_index(op.f('idx_storage_credentials_active'), table_name='storage_credentials')
    op.drop_index(op.f('idx_storage_credentials_created_at'), table_name='storage_credentials')
    op.drop_index(op.f('idx_storage_credentials_protocol'), table_name='storage_credentials')
    op.drop_table('storage_credentials')
    op.drop_index(op.f('idx_system_configs_key'), table_name='system_configs')
    op.drop_table('system_configs')
    op.drop_index(op.f('idx_analysis_tasks_active'), table_name='analysis_tasks')
    op.drop_index(op.f('idx_analysis_tasks_created_at'), table_name='analysis_tasks')
    op.drop_index(op.f('idx_analysis_tasks_last_executed'), table_name='analysis_tasks')
    op.drop_index(op.f('idx_analysis_tasks_model'), table_name='analysis_tasks')
    op.drop_index(op.f('idx_analysis_tasks_webhook'), table_name='analysis_tasks')
    op.drop_table('analysis_tasks')
    op.drop_index(op.f('idx_webhook_logs_created_at'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_logs_request_id'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_logs_source_ip'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_logs_webhook_id'), table_name='webhook_logs')
    op.drop_table('webhook_logs')
    op.drop_index(op.f('idx_task_executions_execution_id'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_feishu_task'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_started_at'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_status'), table_name='task_executions')
    op.drop_index(op.f('idx_task_executions_task_id'), table_name='task_executions')
    op.drop_table('task_executions')
    op.drop_index(op.f('idx_ai_models_active'), table_name='ai_models')
    op.drop_index(op.f('idx_ai_models_created_at'), table_name='ai_models')
    op.drop_index(op.f('idx_ai_models_type'), table_name='ai_models')
    op.drop_table('ai_models')
    op.drop_index(op.f('idx_users_active'), table_name='users')
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_username'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """降级数据库结构"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name=op.f('users_username_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('idx_users_active'), 'users', ['is_active'], unique=False)
    op.create_table('ai_models',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ai_models_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('model_type', postgresql.ENUM('openai_compatible', 'google_gemini', 'anthropic_claude', 'local_model', 'azure_openai', 'moonshot', 'zhipu', 'baidu_qianfan', name='model_type_enum'), autoincrement=False, nullable=False),
    sa.Column('api_endpoint', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('api_key_encrypted', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('api_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('default_params', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('max_tokens', sa.INTEGER(), server_default=sa.text('4000'), autoincrement=False, nullable=True),
    sa.Column('supports_multimodal', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('cost_per_1k_tokens', sa.NUMERIC(precision=10, scale=6), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('rate_limit_rpm', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('rate_limit_tpm', sa.INTEGER(), server_default=sa.text('60000'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ai_models_pkey'),
    sa.UniqueConstraint('name', name='ai_models_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_ai_models_type'), 'ai_models', ['model_type'], unique=False)
    op.create_index(op.f('idx_ai_models_created_at'), 'ai_models', ['created_at'], unique=False)
    op.create_index(op.f('idx_ai_models_active'), 'ai_models', ['is_active'], unique=False)
    op.create_table('task_executions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_executions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_id', sa.VARCHAR(length=50), server_default=sa.text("('exec_'::text || encode(gen_random_bytes(12), 'hex'::text))"), autoincrement=False, nullable=False),
    sa.Column('webhook_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('extracted_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('file_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('file_content_preview', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('prompt_sent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ai_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ai_response_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cost', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('feishu_task_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('feishu_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('fields_updated', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('execution_status', postgresql.ENUM('pending', 'processing', 'success', 'failed', 'timeout', 'cancelled', name='execution_status_enum'), server_default=sa.text("'pending'::execution_status_enum"), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('file_fetched_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ai_called_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ai_responded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('feishu_updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['analysis_tasks.id'], name='task_executions_task_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_executions_pkey'),
    sa.UniqueConstraint('execution_id', name='task_executions_execution_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_task_executions_task_id'), 'task_executions', ['task_id'], unique=False)
    op.create_index(op.f('idx_task_executions_status'), 'task_executions', ['execution_status'], unique=False)
    op.create_index(op.f('idx_task_executions_started_at'), 'task_executions', ['started_at'], unique=False)
    op.create_index(op.f('idx_task_executions_feishu_task'), 'task_executions', ['feishu_task_id'], unique=False)
    op.create_index(op.f('idx_task_executions_execution_id'), 'task_executions', ['execution_id'], unique=False)
    op.create_table('webhook_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('webhook_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=50), server_default=sa.text("('req_'::text || encode(gen_random_bytes(12), 'hex'::text))"), autoincrement=False, nullable=False),
    sa.Column('source_ip', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('request_headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_valid', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('validation_errors', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('task_execution_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_execution_id'], ['task_executions.id'], name=op.f('webhook_logs_task_execution_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['webhook_id'], ['webhooks.id'], name=op.f('webhook_logs_webhook_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('webhook_logs_pkey')),
    sa.UniqueConstraint('request_id', name=op.f('webhook_logs_request_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_webhook_logs_webhook_id'), 'webhook_logs', ['webhook_id'], unique=False)
    op.create_index(op.f('idx_webhook_logs_source_ip'), 'webhook_logs', ['source_ip'], unique=False)
    op.create_index(op.f('idx_webhook_logs_request_id'), 'webhook_logs', ['request_id'], unique=False)
    op.create_index(op.f('idx_webhook_logs_created_at'), 'webhook_logs', ['created_at'], unique=False)
    op.create_table('analysis_tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('webhook_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ai_model_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('storage_credential_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_extraction_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('file_url_variable', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('file_size_limit_mb', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=True),
    sa.Column('supported_file_types', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("ARRAY['txt'::text, 'pdf'::text, 'docx'::text, 'xlsx'::text, 'jpg'::text, 'png'::text, 'gif'::text]"), autoincrement=False, nullable=True),
    sa.Column('prompt_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('retry_delay_seconds', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('feishu_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('field_mapping', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('total_executions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('successful_executions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_executions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_tokens_used', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_cost', sa.NUMERIC(precision=10, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('avg_execution_time_ms', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_executed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['ai_model_id'], ['ai_models.id'], name=op.f('analysis_tasks_ai_model_id_fkey'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['storage_credential_id'], ['storage_credentials.id'], name=op.f('analysis_tasks_storage_credential_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['webhook_id'], ['webhooks.id'], name=op.f('analysis_tasks_webhook_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('analysis_tasks_pkey'))
    )
    op.create_index(op.f('idx_analysis_tasks_webhook'), 'analysis_tasks', ['webhook_id'], unique=False)
    op.create_index(op.f('idx_analysis_tasks_model'), 'analysis_tasks', ['ai_model_id'], unique=False)
    op.create_index(op.f('idx_analysis_tasks_last_executed'), 'analysis_tasks', ['last_executed_at'], unique=False)
    op.create_index(op.f('idx_analysis_tasks_created_at'), 'analysis_tasks', ['created_at'], unique=False)
    op.create_index(op.f('idx_analysis_tasks_active'), 'analysis_tasks', ['is_active'], unique=False)
    op.create_table('system_configs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('config_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('config_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('system_configs_pkey')),
    sa.UniqueConstraint('config_key', name=op.f('system_configs_config_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_system_configs_key'), 'system_configs', ['config_key'], unique=True)
    op.create_table('storage_credentials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('server_address', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('protocol_type', postgresql.ENUM('smb', 'nfs', 'ftp', 'sftp', 'webdav', 'http', 'https', name='protocol_type_enum'), autoincrement=False, nullable=False),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password_encrypted', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('additional_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('connection_timeout', sa.INTEGER(), server_default=sa.text('30'), autoincrement=False, nullable=True),
    sa.Column('read_timeout', sa.INTEGER(), server_default=sa.text('300'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('storage_credentials_pkey')),
    sa.UniqueConstraint('name', name=op.f('storage_credentials_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_storage_credentials_protocol'), 'storage_credentials', ['protocol_type'], unique=False)
    op.create_index(op.f('idx_storage_credentials_created_at'), 'storage_credentials', ['created_at'], unique=False)
    op.create_index(op.f('idx_storage_credentials_active'), 'storage_credentials', ['is_active'], unique=False)
    op.create_table('webhooks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('webhook_id', sa.VARCHAR(length=50), server_default=sa.text("('wh_'::text || encode(gen_random_bytes(16), 'hex'::text))"), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('secret_token', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('allowed_ips', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('rate_limit_per_minute', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_triggered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('total_requests', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('successful_requests', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_requests', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('webhooks_pkey')),
    sa.UniqueConstraint('webhook_id', name=op.f('webhooks_webhook_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_webhooks_webhook_id'), 'webhooks', ['webhook_id'], unique=True)
    op.create_index(op.f('idx_webhooks_created_at'), 'webhooks', ['created_at'], unique=False)
    op.create_index(op.f('idx_webhooks_active'), 'webhooks', ['is_active'], unique=False)
    # ### end Alembic commands ###